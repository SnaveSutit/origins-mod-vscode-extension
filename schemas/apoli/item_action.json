{
	"$schema": "http://json-schema.org/draft-07/schema#",
	"$docsUrl": "https://origins.readthedocs.io/en/latest/types/item_action_types/",
	"type": "object",
	"required": [
		"type"
	],
	"definitions": {
		"action": {
			"$ref": "#"
		},
		"condition": {
			"$ref": "item_condition.json"
		}
	},
	"allOf": [
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:consume",
							"origins:consume"
						]
					}
				}
			},
			"then": {
				"$ref": "item_action_types/consume.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:damage",
							"origins:damage"
						]
					}
				}
			},
			"then": {
				"$ref": "item_action_types/damage.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:holder_action",
							"origins:holder_action"
						]
					}
				}
			},
			"then": {
				"$ref": "item_action_types/holder_action.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:merge_nbt",
							"origins:merge_nbt"
						]
					}
				}
			},
			"then": {
				"$ref": "item_action_types/merge_nbt.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:modify",
							"origins:modify"
						]
					}
				}
			},
			"then": {
				"$ref": "item_action_types/modify.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:remove_enchantment",
							"origins:remove_enchantment"
						]
					}
				}
			},
			"then": {
				"$ref": "item_action_types/remove_enchantment.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:and",
							"origins:and"
						]
					}
				}
			},
			"then": {
				"$schema": "https://json-schema.org/draft-07/schema#",
				"$docsUrl": "https://origins.readthedocs.io/en/latest/types/meta_action_types/and/",
				"type": "object",
				"required": [
					"actions"
				],
				"properties": {
					"actions": {
						"type": "array",
						"items": {
							"$ref": "#/definitions/action"
						},
						"description": "These actions will be executed one after the other (but in the same tick).",
						"markdownDescription": "These actions will be executed one after the other (but in the same tick)."
					},
					"type": {
						"description": "\n\n[Meta Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/and)\n\nExecutes all provided actions in order.\n\nType ID: `origins:and`\n\n\n",
						"markdownDescription": "\n\n[Meta Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/and)\n\nExecutes all provided actions in order.\n\nType ID: `origins:and`\n\n\n"
					}
				}
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:chance",
							"origins:chance"
						]
					}
				}
			},
			"then": {
				"$schema": "https://json-schema.org/draft-07/schema#",
				"$docsUrl": "https://origins.readthedocs.io/en/latest/types/meta_action_types/chance/",
				"type": "object",
				"required": [
					"action",
					"chance"
				],
				"properties": {
					"action": {
						"$ref": "#/definitions/action",
						"description": "The action which might be executed.",
						"markdownDescription": "The action which might be executed."
					},
					"chance": {
						"type": "number",
						"description": "The chance that the action will execute, from 0 to 1. (E.g. 0.1 means 10% chance, 0.95 means 95% chance).",
						"markdownDescription": "The chance that the action will execute, from 0 to 1. (E.g. 0.1 means 10% chance, 0.95 means 95% chance)."
					},
					"fail_action": {
						"$ref": "#/definitions/action",
						"description": "The action to execute if the specified action in the `action` field is not executed.",
						"markdownDescription": "The action to execute if the specified action in the `action` field is not executed."
					},
					"type": {
						"description": "\n\n[Meta Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/chance)\n\nExecutes the provided action only with a specific chance.\n\nType ID: `origins:chance`\n\n\n",
						"markdownDescription": "\n\n[Meta Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/chance)\n\nExecutes the provided action only with a specific chance.\n\nType ID: `origins:chance`\n\n\n"
					}
				}
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:choice",
							"origins:choice"
						]
					}
				}
			},
			"then": {
				"$schema": "https://json-schema.org/draft-07/schema#",
				"$docsUrl": "https://origins.readthedocs.io/en/latest/types/meta_action_types/choice/",
				"type": "object",
				"required": [
					"actions"
				],
				"properties": {
					"actions": {
						"type": "array",
						"items": {
							"type": "object",
							"required": [
								"element",
								"weight"
							],
							"properties": {
								"element": {
									"$ref": "#/definitions/action"
								},
								"weight": {
									"type": "number"
								}
							}
						},
						"description": "Each object has to have an `element` [Action](https://origins.readthedocs.io/en/latest/types/meta_action_types/choice) and a `weight` [Integer](../data_types/integer.md).",
						"markdownDescription": "Each object has to have an `element` [Action](https://origins.readthedocs.io/en/latest/types/meta_action_types/choice) and a `weight` [Integer](../data_types/integer.md)."
					},
					"type": {
						"description": "\n\n[Meta Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/choice)\n\nExecutes one of the provided actions, choosing randomly based on the assigned weights. The actions with higher weight values are more likely to be chosen.\n\nType ID: `origins:choice`\n\n!!! note\n\n    The chance of the object is determined by dividing the weight of the object to the sum of all weights of all the objects (`weight / sumOfAllWeights = chance`).\n\n\n",
						"markdownDescription": "\n\n[Meta Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/choice)\n\nExecutes one of the provided actions, choosing randomly based on the assigned weights. The actions with higher weight values are more likely to be chosen.\n\nType ID: `origins:choice`\n\n!!! note\n\n    The chance of the object is determined by dividing the weight of the object to the sum of all weights of all the objects (`weight / sumOfAllWeights = chance`).\n\n\n"
					}
				}
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:delay",
							"origins:delay"
						]
					}
				}
			},
			"then": {
				"$schema": "https://json-schema.org/draft-07/schema#",
				"$docsUrl": "https://origins.readthedocs.io/en/latest/types/meta_action_types/delay/",
				"type": "object",
				"required": [
					"action",
					"ticks"
				],
				"properties": {
					"action": {
						"$ref": "#/definitions/action",
						"description": "The action which will be executed after the delay.",
						"markdownDescription": "The action which will be executed after the delay."
					},
					"ticks": {
						"type": "integer",
						"description": "The amount of ticks until the action is executed.",
						"markdownDescription": "The amount of ticks until the action is executed."
					},
					"type": {
						"description": "\n\n[Meta Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/delay)\n\nExecutes the provided action after a set amount of ticks.\n\nType ID: `origins:delay`\n\n!!! caution\n\n    Delaying an action for more than a few ticks is not recommended! This meta action type is not reliable for such task.\n\n    If you want to delay an action type *reliably,* you can use a power that would use the [Cooldown (Power Type)](../power_types/cooldown.md) and trigger that power with the [Trigger Cooldown (Entity Action Type)](../entity_action_types/trigger_cooldown.md).\n\n    You can then use another power that would use the [Action Over Time (Power Type)](../power_types/action_over_time.md) and check if the value of the power that would use the [Cooldown (Power Type)](../power_types/cooldown.md) is `\"==\"` to `0` using the [Resource (Entity Condition Type)](../entity_condition_types/resource.md).\n\n\n",
						"markdownDescription": "\n\n[Meta Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/delay)\n\nExecutes the provided action after a set amount of ticks.\n\nType ID: `origins:delay`\n\n!!! caution\n\n    Delaying an action for more than a few ticks is not recommended! This meta action type is not reliable for such task.\n\n    If you want to delay an action type *reliably,* you can use a power that would use the [Cooldown (Power Type)](../power_types/cooldown.md) and trigger that power with the [Trigger Cooldown (Entity Action Type)](../entity_action_types/trigger_cooldown.md).\n\n    You can then use another power that would use the [Action Over Time (Power Type)](../power_types/action_over_time.md) and check if the value of the power that would use the [Cooldown (Power Type)](../power_types/cooldown.md) is `\"==\"` to `0` using the [Resource (Entity Condition Type)](../entity_condition_types/resource.md).\n\n\n"
					}
				}
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:if_else",
							"origins:if_else"
						]
					}
				}
			},
			"then": {
				"$schema": "https://json-schema.org/draft-07/schema#",
				"$docsUrl": "https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else/",
				"type": "object",
				"required": [
					"condition",
					"if_action"
				],
				"properties": {
					"condition": {
						"$ref": "#/definitions/condition",
						"description": "A condition based on the type of action.",
						"markdownDescription": "A condition based on the type of action."
					},
					"if_action": {
						"$ref": "#/definitions/action",
						"description": "The action which is executed when the condition evaluates to true.",
						"markdownDescription": "The action which is executed when the condition evaluates to true."
					},
					"else_action": {
						"$ref": "#/definitions/action",
						"description": "If present, this action will be executed when the condition evaluates to false.",
						"markdownDescription": "If present, this action will be executed when the condition evaluates to false."
					},
					"type": {
						"description": "\n\n[Meta Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else)\n\nExecutes an action only if a condition holds, and optionally executes another action when it doesn't hold.\n\nType ID: `origins:if_else`\n\n!!! note\n\n    Depending on the condition type, a different action type is expected:\n\n    Action Type | Condition Type\n    ------------|----------------\n    [Bi-entity Action Type](../bientity_action_types.md) | [Bi-entity Condition Type](../bientity_condition_types.md)\n    [Entity Action Type](../entity_action_types.md) | [Entity Condition Type](../entity_condition_types.md)\n    [Block Action Type](../block_action_types.md) | [Block Condition Type](../block_condition_types.md)\n    [Item Action Type](../item_action_types.md) | [Item Condition Type](../item_condition_types.md)\n\n\n",
						"markdownDescription": "\n\n[Meta Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else)\n\nExecutes an action only if a condition holds, and optionally executes another action when it doesn't hold.\n\nType ID: `origins:if_else`\n\n!!! note\n\n    Depending on the condition type, a different action type is expected:\n\n    Action Type | Condition Type\n    ------------|----------------\n    [Bi-entity Action Type](../bientity_action_types.md) | [Bi-entity Condition Type](../bientity_condition_types.md)\n    [Entity Action Type](../entity_action_types.md) | [Entity Condition Type](../entity_condition_types.md)\n    [Block Action Type](../block_action_types.md) | [Block Condition Type](../block_condition_types.md)\n    [Item Action Type](../item_action_types.md) | [Item Condition Type](../item_condition_types.md)\n\n\n"
					}
				}
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:if_else_list",
							"origins:if_else_list"
						]
					}
				}
			},
			"then": {
				"$schema": "https://json-schema.org/draft-07/schema#",
				"$docsUrl": "https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list/",
				"type": "object",
				"required": [
					"actions"
				],
				"properties": {
					"actions": {
						"type": "array",
						"items": {
							"type": "object",
							"required": [
								"action",
								"condition"
							],
							"properties": {
								"action": {
									"$ref": "#/definitions/action"
								},
								"condition": {
									"$ref": "#/definitions/condition"
								}
							}
						},
						"description": "Each object has to have an `action` [Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list) object and a `condition` [Condition Type](../condition_types.md) object.",
						"markdownDescription": "Each object has to have an `action` [Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list) object and a `condition` [Condition Type](../condition_types.md) object."
					},
					"type": {
						"description": "\n\n[Meta Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list)\n\nChecks a list of actions associated with conditions, and executes the first one in the list for which the condition holds. Basically a less indentation-heavy way to represent a deeply nested [If-Else (Meta Action Type)](if_else.md).\n\nType ID: `origins:if_else_list`\n\n!!! note\n\n    Depending on the condition type, a different action type is expected:\n    \n    Action Type | Condition Type\n    ------------|----------------\n    [Bi-entity Action Type](../bientity_action_types.md) | [Bi-entity Condition Type](../bientity_condition_types.md)\n    [Entity Action Type](../entity_action_types.md) | [Entity Condition Type](../entity_condition_types.md)\n    [Block Action Type](../block_action_types.md) | [Block Condition Type](../block_condition_types.md)\n    [Item Action Type](../item_action_types.md) | [Item Condition Type](../item_condition_types.md)\n\n\n\n",
						"markdownDescription": "\n\n[Meta Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list)\n\nChecks a list of actions associated with conditions, and executes the first one in the list for which the condition holds. Basically a less indentation-heavy way to represent a deeply nested [If-Else (Meta Action Type)](if_else.md).\n\nType ID: `origins:if_else_list`\n\n!!! note\n\n    Depending on the condition type, a different action type is expected:\n    \n    Action Type | Condition Type\n    ------------|----------------\n    [Bi-entity Action Type](../bientity_action_types.md) | [Bi-entity Condition Type](../bientity_condition_types.md)\n    [Entity Action Type](../entity_action_types.md) | [Entity Condition Type](../entity_condition_types.md)\n    [Block Action Type](../block_action_types.md) | [Block Condition Type](../block_condition_types.md)\n    [Item Action Type](../item_action_types.md) | [Item Condition Type](../item_condition_types.md)\n\n\n\n"
					}
				}
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:nothing",
							"origins:nothing"
						]
					}
				}
			},
			"then": {
				"$schema": "https://json-schema.org/draft-07/schema#",
				"$docsUrl": "https://origins.readthedocs.io/en/latest/types/meta_action_types/nothing/",
				"type": "object"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:side",
							"origins:side"
						]
					}
				}
			},
			"then": {
				"$schema": "https://json-schema.org/draft-07/schema#",
				"$docsUrl": "https://origins.readthedocs.io/en/latest/types/meta_action_types/side/",
				"type": "object",
				"required": [
					"action",
					"side"
				],
				"properties": {
					"action": {
						"$ref": "#/definitions/action",
						"description": "The action to execute.",
						"markdownDescription": "The action to execute."
					},
					"side": {
						"enum": [
							"client",
							"server"
						],
						"description": "Determines where to execute the specified action type. Accepts `\"client\"` or `\"server\"`",
						"markdownDescription": "Determines where to execute the specified action type. Accepts `\"client\"` or `\"server\"`"
					},
					"type": {
						"description": "\n\n[Meta Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/side)\n\nExecutes the specified action type on the specified \"side\".\n\n\n",
						"markdownDescription": "\n\n[Meta Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/side)\n\nExecutes the specified action type on the specified \"side\".\n\n\n"
					}
				}
			}
		}
	]
}