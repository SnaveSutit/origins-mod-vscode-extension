{
	"type": "object",
	"required": [
		"type"
	],
	"allOf": [
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:amount",
							"origins:amount"
						]
					}
				}
			},
			"then": {
				"$ref": "damage_condition_types/amount.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:attacker",
							"origins:attacker"
						]
					}
				}
			},
			"then": {
				"$ref": "damage_condition_types/attacker.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:in_tag",
							"origins:in_tag"
						]
					}
				}
			},
			"then": {
				"$ref": "damage_condition_types/in_tag.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:name",
							"origins:name"
						]
					}
				}
			},
			"then": {
				"$ref": "damage_condition_types/name.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:projectile",
							"origins:projectile"
						]
					}
				}
			},
			"then": {
				"$ref": "damage_condition_types/projectile.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:type",
							"origins:type"
						]
					}
				}
			},
			"then": {
				"$ref": "damage_condition_types/type.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:and",
							"origins:and"
						]
					}
				}
			},
			"then": {
				"type": "object",
				"required": [
					"conditions"
				],
				"properties": {
					"conditions": {
						"type": "array",
						"items": {
							"$ref": "#"
						},
						"description": "All of these condition types have to be fulfilled in order for this condition to be fulfilled.",
						"markdownDescription": "All of these condition types have to be fulfilled in order for this condition to be fulfilled."
					},
					"type": {
						"description": "\n\n[Meta Condition Type](../meta_condition_types.md)\n\nChecks whether all of the provided conditions are fulfilled.\n\nType ID: `origins:and`\n\n\n",
						"markdownDescription": "\n\n[Meta Condition Type](../meta_condition_types.md)\n\nChecks whether all of the provided conditions are fulfilled.\n\nType ID: `origins:and`\n\n\n"
					}
				}
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:chance",
							"origins:chance"
						]
					}
				}
			},
			"then": {
				"type": "object",
				"required": [
					"chance"
				],
				"properties": {
					"chance": {
						"type": "number",
						"description": "The value to compare the randomly generated number to.",
						"markdownDescription": "The value to compare the randomly generated number to."
					},
					"type": {
						"description": "\n\n[Meta Condition Type](../meta_condition_types.md)\n\nGenerates a random number between 0.0 and 1.0 and checks if it's less than a specified value.\n\nType ID: `origins:chance`\n\n\n",
						"markdownDescription": "\n\n[Meta Condition Type](../meta_condition_types.md)\n\nGenerates a random number between 0.0 and 1.0 and checks if it's less than a specified value.\n\nType ID: `origins:chance`\n\n\n"
					}
				}
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:constant",
							"origins:constant"
						]
					}
				}
			},
			"then": {
				"type": "object",
				"required": [
					"value"
				],
				"properties": {
					"value": {
						"type": "boolean",
						"description": "If true, the condition is always fulfilled. If false, the condition is never fulfilled.",
						"markdownDescription": "If true, the condition is always fulfilled. If false, the condition is never fulfilled."
					},
					"type": {
						"description": "\n\n[Meta Condition Type](../meta_condition_types.md)\n\nProvides a constant state where it's either true or false. Mainly added as a backup case in case a condition is required in some power/action/condition types.\n\nType ID: `origins:constant`\n\n\n",
						"markdownDescription": "\n\n[Meta Condition Type](../meta_condition_types.md)\n\nProvides a constant state where it's either true or false. Mainly added as a backup case in case a condition is required in some power/action/condition types.\n\nType ID: `origins:constant`\n\n\n"
					}
				}
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:or",
							"origins:or"
						]
					}
				}
			},
			"then": {
				"type": "object",
				"required": [
					"conditions"
				],
				"properties": {
					"conditions": {
						"type": "array",
						"items": {
							"$ref": "#"
						},
						"description": "Any of these condition types have to be fulfilled in order for this condition to be fulfilled.",
						"markdownDescription": "Any of these condition types have to be fulfilled in order for this condition to be fulfilled."
					},
					"type": {
						"description": "\n\n[Meta Condition Type](../meta_condition_types.md)\n\nChecks whether any (one or more) of the provided conditions are fulfilled.\n\nType ID: `origins:or`\n\n\n",
						"markdownDescription": "\n\n[Meta Condition Type](../meta_condition_types.md)\n\nChecks whether any (one or more) of the provided conditions are fulfilled.\n\nType ID: `origins:or`\n\n\n"
					}
				}
			}
		}
	],
	"properties": {
		"type": {
			"description": "\n\nDamage Condition Types operate on a combination of `DamageSource` and `Float`, allowing to check not only the type of damage dealt, but also how much damage was dealt. These are available to power/condition types that provides a `damage_condition` object field.\n\n\n",
			"markdownDescription": "\n\nDamage Condition Types operate on a combination of `DamageSource` and `Float`, allowing to check not only the type of damage dealt, but also how much damage was dealt. These are available to power/condition types that provides a `damage_condition` object field.\n\n\n"
		}
	}
}