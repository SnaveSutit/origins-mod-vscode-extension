{
	"type": "object",
	"required": [
		"action",
		"ticks"
	],
	"properties": {
		"action": {
			"$ref": "$actionRef",
			"description": "The action which will be executed after the delay.",
			"markdownDescription": "The action which will be executed after the delay."
		},
		"ticks": {
			"type": "integer",
			"description": "The amount of ticks until the action is executed.",
			"markdownDescription": "The amount of ticks until the action is executed."
		},
		"type": {
			"description": "\n\n[Meta Action Type](../meta_action_types.md)\n\nExecutes the provided action after a set amount of ticks.\n\nType ID: `origins:delay`\n\n!!! caution\n\n    Delaying an action for more than a few ticks is not recommended! This meta action type is not reliable for such task.\n\n    If you want to delay an action type *reliably,* you can use a power that would use the [Cooldown (Power Type)](https://origins.readthedocs.io/en/latest/types/meta_action_types/delay) and trigger that power with the [Trigger Cooldown (Entity Action Type)](https://origins.readthedocs.io/en/latest/types/meta_action_types/delay).\n\n    You can then use another power that would use the [Action Over Time (Power Type)](https://origins.readthedocs.io/en/latest/types/meta_action_types/delay) and check if the value of the power that would use the [Cooldown (Power Type)](https://origins.readthedocs.io/en/latest/types/meta_action_types/delay) is `\"==\"` to `0` using the [Resource (Entity Condition Type)](https://origins.readthedocs.io/en/latest/types/meta_action_types/delay).\n\n\n",
			"markdownDescription": "\n\n[Meta Action Type](../meta_action_types.md)\n\nExecutes the provided action after a set amount of ticks.\n\nType ID: `origins:delay`\n\n!!! caution\n\n    Delaying an action for more than a few ticks is not recommended! This meta action type is not reliable for such task.\n\n    If you want to delay an action type *reliably,* you can use a power that would use the [Cooldown (Power Type)](https://origins.readthedocs.io/en/latest/types/meta_action_types/delay) and trigger that power with the [Trigger Cooldown (Entity Action Type)](https://origins.readthedocs.io/en/latest/types/meta_action_types/delay).\n\n    You can then use another power that would use the [Action Over Time (Power Type)](https://origins.readthedocs.io/en/latest/types/meta_action_types/delay) and check if the value of the power that would use the [Cooldown (Power Type)](https://origins.readthedocs.io/en/latest/types/meta_action_types/delay) is `\"==\"` to `0` using the [Resource (Entity Condition Type)](https://origins.readthedocs.io/en/latest/types/meta_action_types/delay).\n\n\n"
		}
	}
}