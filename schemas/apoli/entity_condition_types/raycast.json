{
	"type": "object",
	"properties": {
		"distance": {
			"type": "number",
			"description": "Determines the maximum distance the ray-cast will travel.",
			"markdownDescription": "Determines the maximum distance the ray-cast will travel."
		},
		"block": {
			"type": "boolean",
			"default": true,
			"description": "Determines whether the ray-cast should include blocks.",
			"markdownDescription": "Determines whether the ray-cast should include blocks."
		},
		"entity": {
			"type": "boolean",
			"default": true,
			"description": "Determines whether the ray-cast should include entities.",
			"markdownDescription": "Determines whether the ray-cast should include entities."
		},
		"shape_type": {
			"$ref": "../types/shape_type.json",
			"description": "Determines how the ray-cast will handle blocks.",
			"markdownDescription": "Determines how the ray-cast will handle blocks."
		},
		"fluid_handling": {
			"$ref": "../types/fluid_handling.json",
			"description": "Determines how the ray-cast will handle fluids.",
			"markdownDescription": "Determines how the ray-cast will handle fluids."
		},
		"space": {
			"$ref": "../types/space.json",
			"description": "The space to execute the raycast in. Defaults to `\"local\"` unless `direction` has been specified, in which case it will default to `\"world\"`.",
			"markdownDescription": "The space to execute the raycast in. Defaults to `\"local\"` unless `direction` has been specified, in which case it will default to `\"world\"`."
		},
		"direction": {
			"type": "object",
			"description": "Used to specify the direction of the raycast. Can have a `x`, `y` and `z` [Floats](https://origins.readthedocs.io/en/latest/types/entity_condition_types/raycast).",
			"markdownDescription": "Used to specify the direction of the raycast. Can have a `x`, `y` and `z` [Floats](https://origins.readthedocs.io/en/latest/types/entity_condition_types/raycast)."
		},
		"match_bientity_condition": {
			"$ref": "../bientity_condition.json",
			"description": "If specified, the entity condition type will check if this bi-entity condition type is fulfilled by either or both the 'actor' (the entity being checked by the entity condition type) and 'target' (entity that the ray-cast has gone through). If not, the entity will be ignored.",
			"markdownDescription": "If specified, the entity condition type will check if this bi-entity condition type is fulfilled by either or both the 'actor' (the entity being checked by the entity condition type) and 'target' (entity that the ray-cast has gone through). If not, the entity will be ignored."
		},
		"hit_bientity_condition": {
			"$ref": "../bientity_condition.json",
			"description": "If specified, the entity condition type will check if this bi-entity condition type is fulfilled by either or both the 'actor' (the entity being checked by the entity condition type) and 'target' (the entity that has hit by the ray-cast).",
			"markdownDescription": "If specified, the entity condition type will check if this bi-entity condition type is fulfilled by either or both the 'actor' (the entity being checked by the entity condition type) and 'target' (the entity that has hit by the ray-cast)."
		},
		"entity_distance": {
			"type": "number",
			"description": "Determines the distance of the raycast for entities if `entity` is set to `true`. If absent, it will use the higher value between the entity's attack range (with Reach Entity Attributes compatibility) or the `distance` field.",
			"markdownDescription": "Determines the distance of the raycast for entities if `entity` is set to `true`. If absent, it will use the higher value between the entity's attack range (with Reach Entity Attributes compatibility) or the `distance` field."
		},
		"block_condition": {
			"$ref": "../block_condition.json",
			"description": "If specified, the entity condition type will check if the block that was hit by the ray-cast fulfills this block condition type.",
			"markdownDescription": "If specified, the entity condition type will check if the block that was hit by the ray-cast fulfills this block condition type."
		},
		"block_distance": {
			"type": "number",
			"description": "Determines the distance of the raycast for blocks if `block` is set to `true`. If absent, it will use the higher value between the entity's block reach (with Reach Entity Attributes compatibility) or the `distance` field.",
			"markdownDescription": "Determines the distance of the raycast for blocks if `block` is set to `true`. If absent, it will use the higher value between the entity's block reach (with Reach Entity Attributes compatibility) or the `distance` field."
		},
		"type": {
			"description": "## Raycast\n\n---\n\n\n\n[Entity Condition Type](https://origins.readthedocs.io/en/latest/types/entity_condition_types/raycast)\n\nCasts a ray to the direction where the entity is looking.\n\nType ID: `origins:raycast`\n\n\n\n\n---\n\n### Examples\n\n```json\n\"condition\": {\n    \"type\": \"origins:raycast\",\n    \"distance\": 6,\n    \"block\": true,\n    \"entity\": true,\n    \"shape_type\": \"visual\",\n    \"fluid_handling\": \"any\",\n    \"match_bientity_condition\": {\n        \"type\": \"origins:target_condition\",\n        \"condition\": {\n            \"type\": \"origins:entity_type\",\n            \"entity_type\": \"minecraft:wolf\"\n        }\n    },\n    \"hit_bientity_condition\": {\n        \"type\": \"origins:owner\"\n    }\n}\n```\n\nThis example will check if a wolf mob is tamed by the entity that has fired the ray-cast. The ray-cast will ignore tamable mobs other than wolves.\n",
			"markdownDescription": "undefined## Raycast\n\n---\n\n\n\n[Entity Condition Type](https://origins.readthedocs.io/en/latest/types/entity_condition_types/raycast)\n\nCasts a ray to the direction where the entity is looking.\n\nType ID: `origins:raycast`\n\n\n\n\n---\n\n### Examples\n\n```json\n\"condition\": {\n    \"type\": \"origins:raycast\",\n    \"distance\": 6,\n    \"block\": true,\n    \"entity\": true,\n    \"shape_type\": \"visual\",\n    \"fluid_handling\": \"any\",\n    \"match_bientity_condition\": {\n        \"type\": \"origins:target_condition\",\n        \"condition\": {\n            \"type\": \"origins:entity_type\",\n            \"entity_type\": \"minecraft:wolf\"\n        }\n    },\n    \"hit_bientity_condition\": {\n        \"type\": \"origins:owner\"\n    }\n}\n```\n\nThis example will check if a wolf mob is tamed by the entity that has fired the ray-cast. The ray-cast will ignore tamable mobs other than wolves.\n"
		}
	}
}