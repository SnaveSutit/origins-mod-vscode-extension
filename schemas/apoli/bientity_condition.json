{
	"type": "object",
	"required": [
		"type"
	],
	"allOf": [
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:actor_condition",
							"origins:actor_condition"
						]
					}
				}
			},
			"then": {
				"$ref": "bientity_condition_types/actor_condition.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:attacker",
							"origins:attacker"
						]
					}
				}
			},
			"then": {
				"$ref": "bientity_condition_types/attacker.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:attack_target",
							"origins:attack_target"
						]
					}
				}
			},
			"then": {
				"$ref": "bientity_condition_types/attack_target.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:both",
							"origins:both"
						]
					}
				}
			},
			"then": {
				"$ref": "bientity_condition_types/both.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:can_see",
							"origins:can_see"
						]
					}
				}
			},
			"then": {
				"$ref": "bientity_condition_types/can_see.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:distance",
							"origins:distance"
						]
					}
				}
			},
			"then": {
				"$ref": "bientity_condition_types/distance.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:either",
							"origins:either"
						]
					}
				}
			},
			"then": {
				"$ref": "bientity_condition_types/either.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:equal",
							"origins:equal"
						]
					}
				}
			},
			"then": {
				"$ref": "bientity_condition_types/equal.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:invert",
							"origins:invert"
						]
					}
				}
			},
			"then": {
				"$ref": "bientity_condition_types/invert.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:in_set",
							"origins:in_set"
						]
					}
				}
			},
			"then": {
				"$ref": "bientity_condition_types/in_set.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:owner",
							"origins:owner"
						]
					}
				}
			},
			"then": {
				"$ref": "bientity_condition_types/owner.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:relative_rotation",
							"origins:relative_rotation"
						]
					}
				}
			},
			"then": {
				"$ref": "bientity_condition_types/relative_rotation.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:riding",
							"origins:riding"
						]
					}
				}
			},
			"then": {
				"$ref": "bientity_condition_types/riding.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:riding_recursive",
							"origins:riding_recursive"
						]
					}
				}
			},
			"then": {
				"$ref": "bientity_condition_types/riding_recursive.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:riding_root",
							"origins:riding_root"
						]
					}
				}
			},
			"then": {
				"$ref": "bientity_condition_types/riding_root.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:target_condition",
							"origins:target_condition"
						]
					}
				}
			},
			"then": {
				"$ref": "bientity_condition_types/target_condition.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:undirected",
							"origins:undirected"
						]
					}
				}
			},
			"then": {
				"$ref": "bientity_condition_types/undirected.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:and",
							"origins:and"
						]
					}
				}
			},
			"then": {
				"type": "object",
				"required": [
					"conditions"
				],
				"properties": {
					"conditions": {
						"type": "array",
						"items": {
							"$ref": "#"
						},
						"description": "All of these condition types have to be fulfilled in order for this condition to be fulfilled.",
						"markdownDescription": "All of these condition types have to be fulfilled in order for this condition to be fulfilled."
					},
					"type": {
						"description": "## And\n\n---\n\n\n\n[Meta Condition Type](https://origins.readthedocs.io/en/latest/types/meta_condition_types/and)\n\nChecks whether all of the provided conditions are fulfilled.\n\nType ID: `origins:and`\n\n\n\n\n---\n\n### Examples\n\n```json\n\"condition\": {\n    \"type\": \"origins:and\",\n    \"conditions\": [\n        {\n            \"type\": \"origins:daytime\"\n        },\n        {      \n            \"type\": \"origins:invisible\"\n        }\n    ]\n}\n```\n\nThis example will check if it is both daytime, and the entity is invisible.\n",
						"markdownDescription": "undefined## And\n\n---\n\n\n\n[Meta Condition Type](https://origins.readthedocs.io/en/latest/types/meta_condition_types/and)\n\nChecks whether all of the provided conditions are fulfilled.\n\nType ID: `origins:and`\n\n\n\n\n---\n\n### Examples\n\n```json\n\"condition\": {\n    \"type\": \"origins:and\",\n    \"conditions\": [\n        {\n            \"type\": \"origins:daytime\"\n        },\n        {      \n            \"type\": \"origins:invisible\"\n        }\n    ]\n}\n```\n\nThis example will check if it is both daytime, and the entity is invisible.\n"
					}
				}
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:chance",
							"origins:chance"
						]
					}
				}
			},
			"then": {
				"type": "object",
				"required": [
					"chance"
				],
				"properties": {
					"chance": {
						"type": "number",
						"description": "The value to compare the randomly generated number to.",
						"markdownDescription": "The value to compare the randomly generated number to."
					},
					"type": {
						"description": "## Chance\n\n---\n\n\n\n[Meta Condition Type](https://origins.readthedocs.io/en/latest/types/meta_condition_types/chance)\n\nGenerates a random number between 0.0 and 1.0 and checks if it's less than a specified value.\n\nType ID: `origins:chance`\n\n\n\n\n---\n\n###\tExamples\n\n```json\n\"condition\": {\n\t\"type\": \"origins:chance\",\n\t\"chance\": 0.5\n}\n```\n\nThis example will evaluate to true 50% of the time.\n",
						"markdownDescription": "undefined## Chance\n\n---\n\n\n\n[Meta Condition Type](https://origins.readthedocs.io/en/latest/types/meta_condition_types/chance)\n\nGenerates a random number between 0.0 and 1.0 and checks if it's less than a specified value.\n\nType ID: `origins:chance`\n\n\n\n\n---\n\n###\tExamples\n\n```json\n\"condition\": {\n\t\"type\": \"origins:chance\",\n\t\"chance\": 0.5\n}\n```\n\nThis example will evaluate to true 50% of the time.\n"
					}
				}
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:constant",
							"origins:constant"
						]
					}
				}
			},
			"then": {
				"type": "object",
				"required": [
					"value"
				],
				"properties": {
					"value": {
						"type": "boolean",
						"description": "If true, the condition is always fulfilled. If false, the condition is never fulfilled.",
						"markdownDescription": "If true, the condition is always fulfilled. If false, the condition is never fulfilled."
					},
					"type": {
						"description": "## Constant\n\n---\n\n\n\n[Meta Condition Type](https://origins.readthedocs.io/en/latest/types/meta_condition_types/constant)\n\nProvides a constant state where it's either true or false. Mainly added as a backup case in case a condition is required in some power/action/condition types.\n\nType ID: `origins:constant`\n\n\n\n\n---\n\n### Examples\n\n```json\n\"condition\": {\n    \"type\": \"origins:constant\",\n    \"value\": true\n}\n```\n\nThis example is always true.\n",
						"markdownDescription": "undefined## Constant\n\n---\n\n\n\n[Meta Condition Type](https://origins.readthedocs.io/en/latest/types/meta_condition_types/constant)\n\nProvides a constant state where it's either true or false. Mainly added as a backup case in case a condition is required in some power/action/condition types.\n\nType ID: `origins:constant`\n\n\n\n\n---\n\n### Examples\n\n```json\n\"condition\": {\n    \"type\": \"origins:constant\",\n    \"value\": true\n}\n```\n\nThis example is always true.\n"
					}
				}
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:or",
							"origins:or"
						]
					}
				}
			},
			"then": {
				"type": "object",
				"required": [
					"conditions"
				],
				"properties": {
					"conditions": {
						"type": "array",
						"items": {
							"$ref": "#"
						},
						"description": "Any of these condition types have to be fulfilled in order for this condition to be fulfilled.",
						"markdownDescription": "Any of these condition types have to be fulfilled in order for this condition to be fulfilled."
					},
					"type": {
						"description": "## Or\n\n---\n\n\n\n[Meta Condition Type](https://origins.readthedocs.io/en/latest/types/meta_condition_types/or)\n\nChecks whether any (one or more) of the provided conditions are fulfilled.\n\nType ID: `origins:or`\n\n\n\n\n---\n\n### Examples\n\n```json\n\"condition\": {\n    \"type\": \"origins:or\",\n    \"conditions\": [\n        {\n            \"type\": \"origins:status_effect\",\n            \"effect\": \"minecraft:poison\"\n        },\n        {    \n            \"type\": \"origins:status_effect\",\n            \"effect\": \"minecraft:wither\"\n        }\n    ]\n}\n```\n\nThis example will check if the entity has either the Poison or Wither status effects.\n",
						"markdownDescription": "undefined## Or\n\n---\n\n\n\n[Meta Condition Type](https://origins.readthedocs.io/en/latest/types/meta_condition_types/or)\n\nChecks whether any (one or more) of the provided conditions are fulfilled.\n\nType ID: `origins:or`\n\n\n\n\n---\n\n### Examples\n\n```json\n\"condition\": {\n    \"type\": \"origins:or\",\n    \"conditions\": [\n        {\n            \"type\": \"origins:status_effect\",\n            \"effect\": \"minecraft:poison\"\n        },\n        {    \n            \"type\": \"origins:status_effect\",\n            \"effect\": \"minecraft:wither\"\n        }\n    ]\n}\n```\n\nThis example will check if the entity has either the Poison or Wither status effects.\n"
					}
				}
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"const": "apugli:hits_on_target"
					}
				}
			},
			"then": {
				"$ref": "../apugli/bientity_condition_types/hits_on_target.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"const": "apugli:owner"
					}
				}
			},
			"then": {
				"$ref": "../apugli/bientity_condition_types/owner.json"
			}
		}
	],
	"properties": {
		"type": {
			"description": "## Bi-entity Condition Types\n\n---\n\n\n\nBi-entity Condition Types operate on a `Pair<Entity, Entity>`, or in simpler terms: an actor and a target. The actor and target is determined depending on the used power type, and can be swapped. These are available to power/condition types that provides a `bientity_condition` object field.\n\n\n\n\n---\n\n",
			"markdownDescription": "undefined## Bi-entity Condition Types\n\n---\n\n\n\nBi-entity Condition Types operate on a `Pair<Entity, Entity>`, or in simpler terms: an actor and a target. The actor and target is determined depending on the used power type, and can be swapped. These are available to power/condition types that provides a `bientity_condition` object field.\n\n\n\n\n---\n\n"
		}
	}
}