{
	"type": "object",
	"required": [
		"type"
	],
	"allOf": [
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:actor_action",
							"origins:actor_action"
						]
					}
				}
			},
			"then": {
				"$ref": "bientity_action_types/actor_action.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:add_to_set",
							"origins:add_to_set"
						]
					}
				}
			},
			"then": {
				"$ref": "bientity_action_types/add_to_set.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:add_velocity",
							"origins:add_velocity"
						]
					}
				}
			},
			"then": {
				"$ref": "bientity_action_types/add_velocity.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:damage",
							"origins:damage"
						]
					}
				}
			},
			"then": {
				"$ref": "bientity_action_types/damage.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:invert",
							"origins:invert"
						]
					}
				}
			},
			"then": {
				"$ref": "bientity_action_types/invert.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:mount",
							"origins:mount"
						]
					}
				}
			},
			"then": {
				"$ref": "bientity_action_types/mount.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:remove_from_set",
							"origins:remove_from_set"
						]
					}
				}
			},
			"then": {
				"$ref": "bientity_action_types/remove_from_set.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:set_in_love",
							"origins:set_in_love"
						]
					}
				}
			},
			"then": {
				"$ref": "bientity_action_types/set_in_love.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:tame",
							"origins:tame"
						]
					}
				}
			},
			"then": {
				"$ref": "bientity_action_types/tame.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:target_action",
							"origins:target_action"
						]
					}
				}
			},
			"then": {
				"$ref": "bientity_action_types/target_action.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:and",
							"origins:and"
						]
					}
				}
			},
			"then": {
				"type": "object",
				"required": [
					"actions"
				],
				"properties": {
					"actions": {
						"type": "array",
						"items": {
							"$ref": "#"
						},
						"description": "These actions will be executed one after the other (but in the same tick).",
						"markdownDescription": "These actions will be executed one after the other (but in the same tick)."
					},
					"type": {
						"description": "\n\n[Meta Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/and)\n\nExecutes all provided actions in order.\n\nType ID: `origins:and`\n\n\n",
						"markdownDescription": "\n\n[Meta Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/and)\n\nExecutes all provided actions in order.\n\nType ID: `origins:and`\n\n\n"
					}
				}
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:chance",
							"origins:chance"
						]
					}
				}
			},
			"then": {
				"type": "object",
				"required": [
					"action",
					"chance"
				],
				"properties": {
					"action": {
						"$ref": "#",
						"description": "The action which might be executed.",
						"markdownDescription": "The action which might be executed."
					},
					"chance": {
						"type": "number",
						"description": "The chance that the action will execute, from 0 to 1. (E.g. 0.1 means 10% chance, 0.95 means 95% chance).",
						"markdownDescription": "The chance that the action will execute, from 0 to 1. (E.g. 0.1 means 10% chance, 0.95 means 95% chance)."
					},
					"fail_action": {
						"$ref": "#",
						"description": "The action to execute if the specified action in the `action` field is not executed.",
						"markdownDescription": "The action to execute if the specified action in the `action` field is not executed."
					},
					"type": {
						"description": "\n\n[Meta Action Type](../meta_action_types.md)\n\nExecutes the provided action only with a specific chance.\n\nType ID: `origins:chance`\n\n\n",
						"markdownDescription": "\n\n[Meta Action Type](../meta_action_types.md)\n\nExecutes the provided action only with a specific chance.\n\nType ID: `origins:chance`\n\n\n"
					}
				}
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:choice",
							"origins:choice"
						]
					}
				}
			},
			"then": {
				"type": "object",
				"required": [
					"actions"
				],
				"properties": {
					"actions": {
						"type": "array",
						"items": {
							"type": "object",
							"required": [
								"element",
								"weight"
							],
							"properties": {
								"element": {
									"$ref": "#"
								},
								"weight": {
									"type": "number"
								}
							}
						},
						"description": "Each object has to have an `element` [Action](https://origins.readthedocs.io/en/latest/types/meta_action_types/choice) and a `weight` [Integer](https://origins.readthedocs.io/en/latest/types/meta_action_types/choice).",
						"markdownDescription": "Each object has to have an `element` [Action](https://origins.readthedocs.io/en/latest/types/meta_action_types/choice) and a `weight` [Integer](https://origins.readthedocs.io/en/latest/types/meta_action_types/choice)."
					},
					"type": {
						"description": "\n\n[Meta Action Type](../meta_action_types.md)\n\nExecutes one of the provided actions, choosing randomly based on the assigned weights. The actions with higher weight values are more likely to be chosen.\n\nType ID: `origins:choice`\n\n!!! note\n\n    The chance of the object is determined by dividing the weight of the object to the sum of all weights of all the objects (`weight / sumOfAllWeights = chance`).\n\n\n",
						"markdownDescription": "\n\n[Meta Action Type](../meta_action_types.md)\n\nExecutes one of the provided actions, choosing randomly based on the assigned weights. The actions with higher weight values are more likely to be chosen.\n\nType ID: `origins:choice`\n\n!!! note\n\n    The chance of the object is determined by dividing the weight of the object to the sum of all weights of all the objects (`weight / sumOfAllWeights = chance`).\n\n\n"
					}
				}
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:delay",
							"origins:delay"
						]
					}
				}
			},
			"then": {
				"type": "object",
				"required": [
					"action",
					"ticks"
				],
				"properties": {
					"action": {
						"$ref": "#",
						"description": "The action which will be executed after the delay.",
						"markdownDescription": "The action which will be executed after the delay."
					},
					"ticks": {
						"type": "integer",
						"description": "The amount of ticks until the action is executed.",
						"markdownDescription": "The amount of ticks until the action is executed."
					},
					"type": {
						"description": "\n\n[Meta Action Type](../meta_action_types.md)\n\nExecutes the provided action after a set amount of ticks.\n\nType ID: `origins:delay`\n\n!!! caution\n\n    Delaying an action for more than a few ticks is not recommended! This meta action type is not reliable for such task.\n\n    If you want to delay an action type *reliably,* you can use a power that would use the [Cooldown (Power Type)](https://origins.readthedocs.io/en/latest/types/meta_action_types/delay) and trigger that power with the [Trigger Cooldown (Entity Action Type)](https://origins.readthedocs.io/en/latest/types/meta_action_types/delay).\n\n    You can then use another power that would use the [Action Over Time (Power Type)](https://origins.readthedocs.io/en/latest/types/meta_action_types/delay) and check if the value of the power that would use the [Cooldown (Power Type)](https://origins.readthedocs.io/en/latest/types/meta_action_types/delay) is `\"==\"` to `0` using the [Resource (Entity Condition Type)](https://origins.readthedocs.io/en/latest/types/meta_action_types/delay).\n\n\n",
						"markdownDescription": "\n\n[Meta Action Type](../meta_action_types.md)\n\nExecutes the provided action after a set amount of ticks.\n\nType ID: `origins:delay`\n\n!!! caution\n\n    Delaying an action for more than a few ticks is not recommended! This meta action type is not reliable for such task.\n\n    If you want to delay an action type *reliably,* you can use a power that would use the [Cooldown (Power Type)](https://origins.readthedocs.io/en/latest/types/meta_action_types/delay) and trigger that power with the [Trigger Cooldown (Entity Action Type)](https://origins.readthedocs.io/en/latest/types/meta_action_types/delay).\n\n    You can then use another power that would use the [Action Over Time (Power Type)](https://origins.readthedocs.io/en/latest/types/meta_action_types/delay) and check if the value of the power that would use the [Cooldown (Power Type)](https://origins.readthedocs.io/en/latest/types/meta_action_types/delay) is `\"==\"` to `0` using the [Resource (Entity Condition Type)](https://origins.readthedocs.io/en/latest/types/meta_action_types/delay).\n\n\n"
					}
				}
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:if_else",
							"origins:if_else"
						]
					}
				}
			},
			"then": {
				"type": "object",
				"required": [
					"condition",
					"if_action"
				],
				"properties": {
					"condition": {
						"$ref": "bientity_condition.json",
						"description": "A condition based on the type of action.",
						"markdownDescription": "A condition based on the type of action."
					},
					"if_action": {
						"$ref": "#",
						"description": "The action which is executed when the condition evaluates to true.",
						"markdownDescription": "The action which is executed when the condition evaluates to true."
					},
					"else_action": {
						"$ref": "#",
						"description": "If present, this action will be executed when the condition evaluates to false.",
						"markdownDescription": "If present, this action will be executed when the condition evaluates to false."
					},
					"type": {
						"description": "\n\n[Meta Action Type](../meta_action_types.md)\n\nExecutes an action only if a condition holds, and optionally executes another action when it doesn't hold.\n\nType ID: `origins:if_else`\n\n!!! note\n\n    Depending on the condition type, a different action type is expected:\n\n    Action Type | Condition Type\n    ------------|----------------\n    [Bi-entity Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else) | [Bi-entity Condition Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else)\n    [Entity Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else) | [Entity Condition Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else)\n    [Block Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else) | [Block Condition Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else)\n    [Item Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else) | [Item Condition Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else)\n\n\n",
						"markdownDescription": "\n\n[Meta Action Type](../meta_action_types.md)\n\nExecutes an action only if a condition holds, and optionally executes another action when it doesn't hold.\n\nType ID: `origins:if_else`\n\n!!! note\n\n    Depending on the condition type, a different action type is expected:\n\n    Action Type | Condition Type\n    ------------|----------------\n    [Bi-entity Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else) | [Bi-entity Condition Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else)\n    [Entity Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else) | [Entity Condition Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else)\n    [Block Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else) | [Block Condition Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else)\n    [Item Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else) | [Item Condition Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else)\n\n\n"
					}
				}
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:if_else_list",
							"origins:if_else_list"
						]
					}
				}
			},
			"then": {
				"type": "object",
				"required": [
					"actions"
				],
				"properties": {
					"actions": {
						"type": "array",
						"items": {
							"type": "object",
							"required": [
								"action",
								"condition"
							],
							"properties": {
								"action": {
									"$ref": "#"
								},
								"condition": {
									"$ref": "bientity_condition.json"
								}
							}
						},
						"description": "Each object has to have an `action` [Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list) object and a `condition` [Condition Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list) object.",
						"markdownDescription": "Each object has to have an `action` [Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list) object and a `condition` [Condition Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list) object."
					},
					"type": {
						"description": "\n\n[Meta Action Type](../meta_action_types.md)\n\nChecks a list of actions associated with conditions, and executes the first one in the list for which the condition holds. Basically a less indentation-heavy way to represent a deeply nested [If-Else (Meta Action Type)](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list).\n\nType ID: `origins:if_else_list`\n\n!!! note\n\n    Depending on the condition type, a different action type is expected:\n    \n    Action Type | Condition Type\n    ------------|----------------\n    [Bi-entity Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list) | [Bi-entity Condition Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list)\n    [Entity Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list) | [Entity Condition Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list)\n    [Block Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list) | [Block Condition Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list)\n    [Item Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list) | [Item Condition Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list)\n\n\n\n",
						"markdownDescription": "\n\n[Meta Action Type](../meta_action_types.md)\n\nChecks a list of actions associated with conditions, and executes the first one in the list for which the condition holds. Basically a less indentation-heavy way to represent a deeply nested [If-Else (Meta Action Type)](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list).\n\nType ID: `origins:if_else_list`\n\n!!! note\n\n    Depending on the condition type, a different action type is expected:\n    \n    Action Type | Condition Type\n    ------------|----------------\n    [Bi-entity Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list) | [Bi-entity Condition Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list)\n    [Entity Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list) | [Entity Condition Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list)\n    [Block Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list) | [Block Condition Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list)\n    [Item Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list) | [Item Condition Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list)\n\n\n\n"
					}
				}
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:nothing",
							"origins:nothing"
						]
					}
				}
			},
			"then": {
				"type": "object",
				"properties": {
					"type": {
						"description": "\n\n[Meta Action Type](../meta_action_types.md)\n\nDoes nothing. Can be used as a backup in case an action is not optional in some place.\n\nType ID: `origins:nothing`\n\n\n",
						"markdownDescription": "\n\n[Meta Action Type](../meta_action_types.md)\n\nDoes nothing. Can be used as a backup in case an action is not optional in some place.\n\nType ID: `origins:nothing`\n\n\n"
					}
				}
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:side",
							"origins:side"
						]
					}
				}
			},
			"then": {
				"type": "object",
				"required": [
					"action",
					"side"
				],
				"properties": {
					"action": {
						"$ref": "#",
						"description": "The action to execute.",
						"markdownDescription": "The action to execute."
					},
					"side": {
						"$ref": "types/side.json",
						"description": "Determines where to execute the specified action type. Accepts `\"client\"` or `\"server\"`",
						"markdownDescription": "Determines where to execute the specified action type. Accepts `\"client\"` or `\"server\"`"
					},
					"type": {
						"description": "\n\n[Meta Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/side)\n\nExecutes the specified action type on the specified \"side\".\n\n\n",
						"markdownDescription": "\n\n[Meta Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/side)\n\nExecutes the specified action type on the specified \"side\".\n\n\n"
					}
				}
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"const": "apugli:change_hits_on_target"
					}
				}
			},
			"then": {
				"$ref": "../apugli/bientity_action_types/change_hits_on_target.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"const": "apugli:raycast_between"
					}
				}
			},
			"then": {
				"$ref": "../apugli/bientity_action_types/raycast_between.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"const": "apugli:spawn_custom_effect_cloud"
					}
				}
			},
			"then": {
				"$ref": "../apugli/bientity_action_types/spawn_custom_effect_cloud.json"
			}
		}
	],
	"properties": {
		"type": {
			"description": "\n\nBi-entity Action Types operate on a `Pair<Entity, Entity>`; in simpler terms: an actor and a target. The actor and target is determined depending on the used power type, and can be swapped using [Invert](https://origins.readthedocs.io/en/latest/types/bientity_action_types). These are available to power/action types that provides a `bientity_action` object field.\n\nAs a rule of thumb, the actor is usually the entity that \"triggers\" the action (e.g. uses or attacks another entity), while the target is the entity that is being targeted (e.g. the entity that is being used or attacked).\n\n\n",
			"markdownDescription": "\n\nBi-entity Action Types operate on a `Pair<Entity, Entity>`; in simpler terms: an actor and a target. The actor and target is determined depending on the used power type, and can be swapped using [Invert](https://origins.readthedocs.io/en/latest/types/bientity_action_types). These are available to power/action types that provides a `bientity_action` object field.\n\nAs a rule of thumb, the actor is usually the entity that \"triggers\" the action (e.g. uses or attacks another entity), while the target is the entity that is being targeted (e.g. the entity that is being used or attacked).\n\n\n"
		}
	}
}