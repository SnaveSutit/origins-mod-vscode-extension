{
	"type": "object",
	"required": [
		"type"
	],
	"allOf": [
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:action_on_set",
							"origins:action_on_set"
						]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/action_on_set.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:add_velocity",
							"origins:add_velocity"
						]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/add_velocity.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:add_xp",
							"origins:add_xp"
						]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/add_xp.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:apply_effect",
							"origins:apply_effect"
						]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/apply_effect.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:area_of_effect",
							"origins:area_of_effect"
						]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/area_of_effect.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:block_action_at",
							"origins:block_action_at"
						]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/block_action_at.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:change_resource",
							"origins:change_resource"
						]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/change_resource.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:clear_effect",
							"origins:clear_effect"
						]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/clear_effect.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:crafting_table",
							"origins:crafting_table"
						]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/crafting_table.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:damage",
							"origins:damage"
						]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/damage.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:dismount",
							"origins:dismount"
						]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/dismount.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:drop_inventory",
							"origins:drop_inventory"
						]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/drop_inventory.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:emit_game_event",
							"origins:emit_game_event"
						]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/emit_game_event.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:ender_chest",
							"origins:ender_chest"
						]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/ender_chest.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:equipped_item_action",
							"origins:equipped_item_action"
						]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/equipped_item_action.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:execute_command",
							"origins:execute_command"
						]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/execute_command.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:exhaust",
							"origins:exhaust"
						]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/exhaust.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:explode",
							"origins:explode"
						]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/explode.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:extinguish",
							"origins:extinguish"
						]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/extinguish.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:feed",
							"origins:feed"
						]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/feed.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:fire_projectile",
							"origins:fire_projectile"
						]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/fire_projectile.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:gain_air",
							"origins:gain_air"
						]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/gain_air.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:give",
							"origins:give"
						]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/give.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:grant_advancement",
							"origins:grant_advancement"
						]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/grant_advancement.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:grant_power",
							"origins:grant_power"
						]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/grant_power.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:heal",
							"origins:heal"
						]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/heal.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:modify_death_ticks",
							"origins:modify_death_ticks"
						]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/modify_death_ticks.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:modify_inventory",
							"origins:modify_inventory"
						]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/modify_inventory.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:modify_resource",
							"origins:modify_resource"
						]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/modify_resource.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:modify_stat",
							"origins:modify_stat"
						]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/modify_stat.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:passenger_action",
							"origins:passenger_action"
						]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/passenger_action.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:play_sound",
							"origins:play_sound"
						]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/play_sound.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:random_teleport",
							"origins:random_teleport"
						]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/random_teleport.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:raycast",
							"origins:raycast"
						]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/raycast.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:remove_power",
							"origins:remove_power"
						]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/remove_power.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:replace_inventory",
							"origins:replace_inventory"
						]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/replace_inventory.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:revoke_advancement",
							"origins:revoke_advancement"
						]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/revoke_advancement.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:revoke_all_powers",
							"origins:revoke_all_powers"
						]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/revoke_all_powers.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:revoke_power",
							"origins:revoke_power"
						]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/revoke_power.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:riding_action",
							"origins:riding_action"
						]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/riding_action.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:selector_action",
							"origins:selector_action"
						]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/selector_action.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:set_fall_distance",
							"origins:set_fall_distance"
						]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/set_fall_distance.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:set_on_fire",
							"origins:set_on_fire"
						]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/set_on_fire.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:spawn_effect_cloud",
							"origins:spawn_effect_cloud"
						]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/spawn_effect_cloud.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:spawn_entity",
							"origins:spawn_entity"
						]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/spawn_entity.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:spawn_particles",
							"origins:spawn_particles"
						]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/spawn_particles.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:swing_hand",
							"origins:swing_hand"
						]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/swing_hand.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:toggle",
							"origins:toggle"
						]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/toggle.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:trigger_cooldown",
							"origins:trigger_cooldown"
						]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/trigger_cooldown.json"
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:and",
							"origins:and"
						]
					}
				}
			},
			"then": {
				"type": "object",
				"required": [
					"actions"
				],
				"properties": {
					"actions": {
						"type": "array",
						"items": {
							"$ref": "#"
						},
						"description": "These actions will be executed one after the other (but in the same tick).",
						"markdownDescription": "These actions will be executed one after the other (but in the same tick)."
					},
					"type": {
						"description": "\n\n[Meta Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/and)\n\nExecutes all provided actions in order.\n\nType ID: `origins:and`\n\n\n",
						"markdownDescription": "\n\n[Meta Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/and)\n\nExecutes all provided actions in order.\n\nType ID: `origins:and`\n\n\n"
					}
				}
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:chance",
							"origins:chance"
						]
					}
				}
			},
			"then": {
				"type": "object",
				"required": [
					"action",
					"chance"
				],
				"properties": {
					"action": {
						"$ref": "#",
						"description": "The action which might be executed.",
						"markdownDescription": "The action which might be executed."
					},
					"chance": {
						"type": "number",
						"description": "The chance that the action will execute, from 0 to 1. (E.g. 0.1 means 10% chance, 0.95 means 95% chance).",
						"markdownDescription": "The chance that the action will execute, from 0 to 1. (E.g. 0.1 means 10% chance, 0.95 means 95% chance)."
					},
					"fail_action": {
						"$ref": "#",
						"description": "The action to execute if the specified action in the `action` field is not executed.",
						"markdownDescription": "The action to execute if the specified action in the `action` field is not executed."
					},
					"type": {
						"description": "\n\n[Meta Action Type](../meta_action_types.md)\n\nExecutes the provided action only with a specific chance.\n\nType ID: `origins:chance`\n\n\n",
						"markdownDescription": "\n\n[Meta Action Type](../meta_action_types.md)\n\nExecutes the provided action only with a specific chance.\n\nType ID: `origins:chance`\n\n\n"
					}
				}
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:choice",
							"origins:choice"
						]
					}
				}
			},
			"then": {
				"type": "object",
				"required": [
					"actions"
				],
				"properties": {
					"actions": {
						"type": "array",
						"items": {
							"type": "object",
							"required": [
								"element",
								"weight"
							],
							"properties": {
								"element": {
									"$ref": "#"
								},
								"weight": {
									"type": "number"
								}
							}
						},
						"description": "Each object has to have an `element` [Action](https://origins.readthedocs.io/en/latest/types/meta_action_types/choice) and a `weight` [Integer](https://origins.readthedocs.io/en/latest/types/meta_action_types/choice).",
						"markdownDescription": "Each object has to have an `element` [Action](https://origins.readthedocs.io/en/latest/types/meta_action_types/choice) and a `weight` [Integer](https://origins.readthedocs.io/en/latest/types/meta_action_types/choice)."
					},
					"type": {
						"description": "\n\n[Meta Action Type](../meta_action_types.md)\n\nExecutes one of the provided actions, choosing randomly based on the assigned weights. The actions with higher weight values are more likely to be chosen.\n\nType ID: `origins:choice`\n\n!!! note\n\n    The chance of the object is determined by dividing the weight of the object to the sum of all weights of all the objects (`weight / sumOfAllWeights = chance`).\n\n\n",
						"markdownDescription": "\n\n[Meta Action Type](../meta_action_types.md)\n\nExecutes one of the provided actions, choosing randomly based on the assigned weights. The actions with higher weight values are more likely to be chosen.\n\nType ID: `origins:choice`\n\n!!! note\n\n    The chance of the object is determined by dividing the weight of the object to the sum of all weights of all the objects (`weight / sumOfAllWeights = chance`).\n\n\n"
					}
				}
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:delay",
							"origins:delay"
						]
					}
				}
			},
			"then": {
				"type": "object",
				"required": [
					"action",
					"ticks"
				],
				"properties": {
					"action": {
						"$ref": "#",
						"description": "The action which will be executed after the delay.",
						"markdownDescription": "The action which will be executed after the delay."
					},
					"ticks": {
						"type": "integer",
						"description": "The amount of ticks until the action is executed.",
						"markdownDescription": "The amount of ticks until the action is executed."
					},
					"type": {
						"description": "\n\n[Meta Action Type](../meta_action_types.md)\n\nExecutes the provided action after a set amount of ticks.\n\nType ID: `origins:delay`\n\n!!! caution\n\n    Delaying an action for more than a few ticks is not recommended! This meta action type is not reliable for such task.\n\n    If you want to delay an action type *reliably,* you can use a power that would use the [Cooldown (Power Type)](https://origins.readthedocs.io/en/latest/types/meta_action_types/delay) and trigger that power with the [Trigger Cooldown (Entity Action Type)](https://origins.readthedocs.io/en/latest/types/meta_action_types/delay).\n\n    You can then use another power that would use the [Action Over Time (Power Type)](https://origins.readthedocs.io/en/latest/types/meta_action_types/delay) and check if the value of the power that would use the [Cooldown (Power Type)](https://origins.readthedocs.io/en/latest/types/meta_action_types/delay) is `\"==\"` to `0` using the [Resource (Entity Condition Type)](https://origins.readthedocs.io/en/latest/types/meta_action_types/delay).\n\n\n",
						"markdownDescription": "\n\n[Meta Action Type](../meta_action_types.md)\n\nExecutes the provided action after a set amount of ticks.\n\nType ID: `origins:delay`\n\n!!! caution\n\n    Delaying an action for more than a few ticks is not recommended! This meta action type is not reliable for such task.\n\n    If you want to delay an action type *reliably,* you can use a power that would use the [Cooldown (Power Type)](https://origins.readthedocs.io/en/latest/types/meta_action_types/delay) and trigger that power with the [Trigger Cooldown (Entity Action Type)](https://origins.readthedocs.io/en/latest/types/meta_action_types/delay).\n\n    You can then use another power that would use the [Action Over Time (Power Type)](https://origins.readthedocs.io/en/latest/types/meta_action_types/delay) and check if the value of the power that would use the [Cooldown (Power Type)](https://origins.readthedocs.io/en/latest/types/meta_action_types/delay) is `\"==\"` to `0` using the [Resource (Entity Condition Type)](https://origins.readthedocs.io/en/latest/types/meta_action_types/delay).\n\n\n"
					}
				}
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:if_else",
							"origins:if_else"
						]
					}
				}
			},
			"then": {
				"type": "object",
				"required": [
					"condition",
					"if_action"
				],
				"properties": {
					"condition": {
						"$ref": "entity_condition.json",
						"description": "A condition based on the type of action.",
						"markdownDescription": "A condition based on the type of action."
					},
					"if_action": {
						"$ref": "#",
						"description": "The action which is executed when the condition evaluates to true.",
						"markdownDescription": "The action which is executed when the condition evaluates to true."
					},
					"else_action": {
						"$ref": "#",
						"description": "If present, this action will be executed when the condition evaluates to false.",
						"markdownDescription": "If present, this action will be executed when the condition evaluates to false."
					},
					"type": {
						"description": "\n\n[Meta Action Type](../meta_action_types.md)\n\nExecutes an action only if a condition holds, and optionally executes another action when it doesn't hold.\n\nType ID: `origins:if_else`\n\n!!! note\n\n    Depending on the condition type, a different action type is expected:\n\n    Action Type | Condition Type\n    ------------|----------------\n    [Bi-entity Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else) | [Bi-entity Condition Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else)\n    [Entity Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else) | [Entity Condition Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else)\n    [Block Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else) | [Block Condition Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else)\n    [Item Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else) | [Item Condition Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else)\n\n\n",
						"markdownDescription": "\n\n[Meta Action Type](../meta_action_types.md)\n\nExecutes an action only if a condition holds, and optionally executes another action when it doesn't hold.\n\nType ID: `origins:if_else`\n\n!!! note\n\n    Depending on the condition type, a different action type is expected:\n\n    Action Type | Condition Type\n    ------------|----------------\n    [Bi-entity Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else) | [Bi-entity Condition Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else)\n    [Entity Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else) | [Entity Condition Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else)\n    [Block Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else) | [Block Condition Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else)\n    [Item Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else) | [Item Condition Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else)\n\n\n"
					}
				}
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:if_else_list",
							"origins:if_else_list"
						]
					}
				}
			},
			"then": {
				"type": "object",
				"required": [
					"actions"
				],
				"properties": {
					"actions": {
						"type": "array",
						"items": {
							"type": "object",
							"required": [
								"action",
								"condition"
							],
							"properties": {
								"action": {
									"$ref": "#"
								},
								"condition": {
									"$ref": "entity_condition.json"
								}
							}
						},
						"description": "Each object has to have an `action` [Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list) object and a `condition` [Condition Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list) object.",
						"markdownDescription": "Each object has to have an `action` [Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list) object and a `condition` [Condition Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list) object."
					},
					"type": {
						"description": "\n\n[Meta Action Type](../meta_action_types.md)\n\nChecks a list of actions associated with conditions, and executes the first one in the list for which the condition holds. Basically a less indentation-heavy way to represent a deeply nested [If-Else (Meta Action Type)](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list).\n\nType ID: `origins:if_else_list`\n\n!!! note\n\n    Depending on the condition type, a different action type is expected:\n    \n    Action Type | Condition Type\n    ------------|----------------\n    [Bi-entity Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list) | [Bi-entity Condition Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list)\n    [Entity Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list) | [Entity Condition Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list)\n    [Block Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list) | [Block Condition Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list)\n    [Item Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list) | [Item Condition Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list)\n\n\n\n",
						"markdownDescription": "\n\n[Meta Action Type](../meta_action_types.md)\n\nChecks a list of actions associated with conditions, and executes the first one in the list for which the condition holds. Basically a less indentation-heavy way to represent a deeply nested [If-Else (Meta Action Type)](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list).\n\nType ID: `origins:if_else_list`\n\n!!! note\n\n    Depending on the condition type, a different action type is expected:\n    \n    Action Type | Condition Type\n    ------------|----------------\n    [Bi-entity Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list) | [Bi-entity Condition Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list)\n    [Entity Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list) | [Entity Condition Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list)\n    [Block Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list) | [Block Condition Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list)\n    [Item Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list) | [Item Condition Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list)\n\n\n\n"
					}
				}
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:nothing",
							"origins:nothing"
						]
					}
				}
			},
			"then": {
				"type": "object",
				"properties": {
					"type": {
						"description": "\n\n[Meta Action Type](../meta_action_types.md)\n\nDoes nothing. Can be used as a backup in case an action is not optional in some place.\n\nType ID: `origins:nothing`\n\n\n",
						"markdownDescription": "\n\n[Meta Action Type](../meta_action_types.md)\n\nDoes nothing. Can be used as a backup in case an action is not optional in some place.\n\nType ID: `origins:nothing`\n\n\n"
					}
				}
			}
		},
		{
			"if": {
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"enum": [
							"apoli:side",
							"origins:side"
						]
					}
				}
			},
			"then": {
				"type": "object",
				"required": [
					"action",
					"side"
				],
				"properties": {
					"action": {
						"$ref": "#",
						"description": "The action to execute.",
						"markdownDescription": "The action to execute."
					},
					"side": {
						"enum": [
							"client",
							"server"
						],
						"description": "Determines where to execute the specified action type. Accepts `\"client\"` or `\"server\"`",
						"markdownDescription": "Determines where to execute the specified action type. Accepts `\"client\"` or `\"server\"`"
					},
					"type": {
						"description": "\n\n[Meta Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/side)\n\nExecutes the specified action type on the specified \"side\".\n\n\n",
						"markdownDescription": "\n\n[Meta Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/side)\n\nExecutes the specified action type on the specified \"side\".\n\n\n"
					}
				}
			}
		}
	],
	"properties": {
		"type": {
			"description": "\n\nEntity Action Types operate on an `Entity`. Some more specific actions only have an effect on more specific entity types (e.g. [Exhaust (Entity Action Type)](https://origins.readthedocs.io/en/latest/types/entity_action_types) only works on a `PlayerEntity`, as other entities do not have a hunger bar). These are available to power/action types that provides a `entity_action` object field.\n\n\n",
			"markdownDescription": "\n\nEntity Action Types operate on an `Entity`. Some more specific actions only have an effect on more specific entity types (e.g. [Exhaust (Entity Action Type)](https://origins.readthedocs.io/en/latest/types/entity_action_types) only works on a `PlayerEntity`, as other entities do not have a hunger bar). These are available to power/action types that provides a `entity_action` object field.\n\n\n"
		}
	}
}